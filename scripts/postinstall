#!/bin/sh -x
#   Copyright 2025 SAS Institute, Inc., Cary, NC USA
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#  preinstall.sh
#  CloudLAPS
#
#  Created by Henry Kon on 5/30/24.
#  edited Daniel Reis 7/30

# Variables
oldadminaccount="localadmin"
if [ -e "/Library/Managed\ Preferences/com.sas.catalyst.plist"]; then
    newadminaccount=defaults read /Library/Managed\ Preferences/com.sas.catalyst AdminUsername
    newadminfullname=defaults read /Library/Managed\ Preferences/com.sas.catalyst AdminUsername
else
    echo "Could not read new admin username from preference file because the file does not exist"
    newadminaccount="itadmin"
    newadminfullname="itadmin"
fi

# Check if itadmin exists
if id "$newadminaccount" &>/dev/null; then
    echo "$newadminaccount account already exists, moving on"
else
    echo "Creating $newadminaccount account"
    export pass=$(system_profiler SPHardwareDataType | awk '/Serial/ {print $4}')
    export pass=$(echo -n $pass | shasum -a 256 | cut -d ' ' -f1)
    sysadminctl -addUser $newadminaccount -fullName "$newadminfullname" -password $pass -admin

    # Verify the password set works
    echo "Verifying $newadminaccount account password"
    dscl . -authonly $newadminaccount $pass
    if [ $? -eq 0 ]; then
        echo "Password verification successful"
    else
        echo "Password verification failed"
        exit 1
    fi
fi

# Action 2: Check if localadmin exists and remove if it does
if id "$oldadminaccount" &>/dev/null; then
    echo "Removing $oldadminaccount account"
    sysadminctl -deleteUser $oldadminaccount
else
    echo "No $oldadminaccount account found, moving on"
fi

# Action 3: Check if macOSLAPS is installed and remove if it is
if [ -e "/usr/local/laps/macOSLAPS" ]; then
    echo "Removing macOSLAPS"
    sudo rm -f "/usr/local/laps/macOSLAPS"
    sudo rm -f "/usr/local/laps/macOSLAPS-repair"
    sudo rm -f "/private/etc/paths.d/laps"
    sudo rm -f "/Library/LaunchDaemons/edu.psu.macoslaps-check.plist"
    if [ -e "/var/root/.GeneratedLAPSServiceName" ]; then
        currentAdminPasswordUUID=$(cat "/var/root/.GeneratedLAPSServiceName")
        security delete-generic-password -w -s "$currentAdminPasswordUUID"
    fi
    echo "Removal complete"
else
    echo "No macOSLAPS install found, moving on"
fi

# Action 4: Unset the password variable
unset pass

# Action 5: Enable launch daemon and run
EnableLaunchDaemonAndRun() {
    if [ -e "/Library/LaunchDaemons/com.sas.catalyst-run.plist" ]; then
        launchctl unload /Library/LaunchDaemons/com.sas.catalyst-run.plist
        rm -rf /Library/LaunchDaemons/com.sas.catalyst-run.plist
    fi
    plutil -create xml1 /Library/LaunchDaemons/com.sas.catalyst-run.plist
    plutil -insert Label -string com.sas.catalyst-run /Library/LaunchDaemons/com.sas.catalyst-run.plist
    plutil -insert ProgramArguments -array /Library/LaunchDaemons/com.sas.catalyst-run.plist
    plutil -insert ProgramArguments -string /Applications/Utilities/catalyst.app/Contents/MacOS/catalyst -append /Library/LaunchDaemons/com.sas.catalyst-run.plist
    plutil -insert StartInterval -integer 5400 /Library/LaunchDaemons/com.sas.catalyst-run.plist
    launchctl load /Library/LaunchDaemons/com.sas.catalyst-run.plist
    launchctl start com.sas.catalyst-run
}

EnableLaunchDaemonAndRun

exit 0
