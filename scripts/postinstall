#!/bin/sh -x
#   Copyright 2025 SAS Institute, Inc., Cary, NC USA
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#  preinstall.sh
#  CloudLAPS
#
#  Created by Henry Kon on 5/30/24.
#  edited Daniel Reis 7/30

waitforSetupAssistant () {
  until [[ -f /var/db/.AppleSetupDone ]]; do
    delay=$(( $RANDOM % 50 + 10 ))
    echo "$(date) |  + Setup Assistant not done, waiting [$delay] seconds"
    sleep $delay
  done
  echo "$(date) | Setup Assistant is done, lets carry on"
}

# Wait for setup assistant to complete to prevent this account from becoming primary
waitforSetupAssistant

# Check if Managed Preference File Exists
if [ ! -e "/Library/Managed Preferences/com.sas.catalyst.plist" ]; then
    echo "FATAL: Managed Preferences file not found"
    exit 1
fi

# Get new admin account and fullname from managed preferences
# If not found, use default values
export newadminaccount=""
export newadminfullname=""
newadminaccount=$(defaults read /Library/Managed\ Preferences/com.sas.catalyst AdminUsername)
newadminfullname=$(defaults read /Library/Managed\ Preferences/com.sas.catalyst AdminUsername)
if [ -z "$newadminaccount" ] || [ -z "$newadminfullname" ]; then
    echo "New admin username or fullname is empty, using default values"
    newadminaccount="itadmin"
    newadminfullname="itadmin"
else
    echo "New admin account: $newadminaccount, Fullname: $newadminfullname"
fi

# Check if MigrateFromMacOSLAPS is set to true in managed preference
# If not found, use default value of false
export migrate=""
migrate=$(defaults read /Library/Managed\ Preferences/com.sas.catalyst MigrateFromMacOSLAPS)
if [ -z "$migrate" ]; then
    echo "MigrateFromMacOSLAPS is not set, using default value"
    migrate="0"
fi
echo "MigrateFromMacOSLAPS is set to: $migrate"

# Check if old admin account is set in managed preferences
# If not found, use default value
export oldadminaccount=""
oldadminaccount=$(defaults read /Library/Managed\ Preferences/com.sas.catalyst OldAdminUsername)
if [ -z "$oldadminaccount" ]; then
    echo "Old admin username is empty, using default value"
    oldadminaccount="localadmin"
else
    echo "Old admin account: $oldadminaccount"
fi

# Check if new admin account exists
# If it does, skip creation
# If it does not, create it with a password
# The password will be retrieved from managed preferences or generated if not found
if id "$newadminaccount" >/dev/null 2>&1; then
    echo "$newadminaccount account already exists, moving on"
else
    echo "Creating $newadminaccount account"
    export pass=""
    pass=$(defaults read /Library/Managed\ Preferences/com.sas.catalyst FirstPassword)
    if [ -z "$pass" ]; then
        echo "No password found in managed preferences, generating a new one"
        pass=$(system_profiler SPHardwareDataType | awk '/Serial/ {print $4}')
        pass=$(printf '%s' "$pass" | shasum -a 256 | cut -d ' ' -f1)
    fi
    sysadminctl -addUser "$newadminaccount" -fullName "$newadminfullname" -password "$pass" -admin

    # Verify the password set works
    echo "Verifying $newadminaccount account password"
    if dscl . -authonly "$newadminaccount" "$pass"; then
        echo "Password verification successful"
    else
        echo "Password verification failed"
        exit 1
    fi

    # Unset the password variable
    unset pass
fi

# Validate we're migrating, check if old admin account exists and remove if it does
if id "$oldadminaccount" >/dev/null 2>&1; then
    if [ "$migrate" = "1" ]; then
        echo "Removing $oldadminaccount account"
        sysadminctl -deleteUser "$oldadminaccount"
    else
        echo "Old admin account found but migration is not set to true, skipping removal"
    fi
else
    echo "No $oldadminaccount account found, moving on"
fi

# Validate we're migrating, check if macOSLAPS is installed and remove if it is
if [ -e "/usr/local/laps/macOSLAPS" ] && [ "$migrate" = "1" ]; then
    echo "Removing macOSLAPS"
    sudo rm -f "/usr/local/laps/macOSLAPS"
    sudo rm -f "/usr/local/laps/macOSLAPS-repair"
    sudo rm -f "/private/etc/paths.d/laps"
    sudo rm -f "/Library/LaunchDaemons/edu.psu.macoslaps-check.plist"
    if [ -e "/var/root/.GeneratedLAPSServiceName" ]; then
        currentAdminPasswordUUID=$(cat "/var/root/.GeneratedLAPSServiceName")
        security delete-generic-password -w -s "$currentAdminPasswordUUID"
    fi
    echo "Removal complete"
else
    echo "No macOSLAPS install found, moving on"
fi

# Enable launch daemon and run
EnableLaunchDaemonAndRun() {
    if [ -e "/Library/LaunchDaemons/com.sas.catalyst-run.plist" ]; then
        launchctl unload /Library/LaunchDaemons/com.sas.catalyst-run.plist
        rm -rf /Library/LaunchDaemons/com.sas.catalyst-run.plist
    fi
    if [ -e "/Library/LaunchDaemons/com.sas.catalyst-rotate.plist" ]; then
        launchctl unload /Library/LaunchDaemons/com.sas.catalyst-rotate.plist
        rm -rf /Library/LaunchDaemons/com.sas.catalyst-rotate.plist
    fi
    plutil -create xml1 /Library/LaunchDaemons/com.sas.catalyst-rotate.plist
    plutil -insert Label -string com.sas.catalyst-rotate /Library/LaunchDaemons/com.sas.catalyst-rotate.plist
    plutil -insert ProgramArguments -array /Library/LaunchDaemons/com.sas.catalyst-rotate.plist
    plutil -insert ProgramArguments -string /Applications/Utilities/catalyst.app/Contents/MacOS/catalyst -append /Library/LaunchDaemons/com.sas.catalyst-rotate.plist
    plutil -insert ProgramArguments -string --override-expiration -append /Library/LaunchDaemons/com.sas.catalyst-rotate.plist
    launchctl load /Library/LaunchDaemons/com.sas.catalyst-rotate.plist
    plutil -create xml1 /Library/LaunchDaemons/com.sas.catalyst-run.plist
    plutil -insert Label -string com.sas.catalyst-run /Library/LaunchDaemons/com.sas.catalyst-run.plist
    plutil -insert ProgramArguments -array /Library/LaunchDaemons/com.sas.catalyst-run.plist
    plutil -insert ProgramArguments -string /Applications/Utilities/catalyst.app/Contents/MacOS/catalyst -append /Library/LaunchDaemons/com.sas.catalyst-run.plist
    plutil -insert StartInterval -integer 5400 /Library/LaunchDaemons/com.sas.catalyst-run.plist
    launchctl load /Library/LaunchDaemons/com.sas.catalyst-run.plist
    launchctl start com.sas.catalyst-run
}

EnableLaunchDaemonAndRun

exit 0
